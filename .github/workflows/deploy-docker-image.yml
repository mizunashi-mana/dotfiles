name: Deploy Docker images

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    strategy:
      matrix:
        image:
          [
            {
              target_host: "devcontainer-claude",
              image_name: "${{ github.repository }}/devcontainer-claude",
              full_platforms: "linux/amd64,linux/arm64",
            },
            {
              target_host: "devcontainer",
              image_name: "${{ github.repository }}/devcontainer",
              full_platforms: "linux/amd64",
            },
          ]

    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-labels: ${{ steps.meta.outputs.labels }}
      image-id: ${{ steps.build.outputs.imageid }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.image.image_name }}

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ github.event_name == 'pull_request' && 'linux/amd64' || matrix.image.full_platforms }}
          outputs: type=docker,dest=/tmp/${{ matrix.image.target_host }}-image.tar
          secrets: |
            github-token=${{ secrets.GITHUB_TOKEN }}
          build-args: |
            SETUP_HOST=${{ matrix.image.target_host }}

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.image.target_host }}-image
          path: /tmp/${{ matrix.image.target_host }}-image.tar
          retention-days: 1

  push:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      matrix:
        image:
          [
            { target_host: "devcontainer-claude" },
            { target_host: "devcontainer" },
          ]

    steps:
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac #v3.9.1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download image artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ matrix.image.target_host }}-image
          path: /tmp

      - name: Load Docker image
        run: docker load -i /tmp/${{ matrix.image.target_host }}-image.tar

      - name: Push Docker image
        run: |
          for tag in ${{ needs.build.outputs.image-tags }}; do
            docker tag '${{ needs.build.outputs.image-id }}' "$tag"
            docker push "$tag"
          done

      - name: Sign the published Docker image
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ needs.build.outputs.image-tags }}
          DIGEST: ${{ needs.build.outputs.image-digest }}
        run: |
          echo "${TAGS}" | xargs -I {} cosign sign --yes "{}@${DIGEST}"

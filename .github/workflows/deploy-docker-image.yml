name: Deploy Docker images

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  REGISTRY: ghcr.io

jobs:
  define-matrix:
    runs-on: ubuntu-latest
    permissions: {}

    outputs:
      matrix_image: ${{ steps.set.outputs.matrix_image }}

    steps:
      - name: Set variables
        id: set
        run: |
          echo "matrix_image=$(echo '
          [
            {
              "target_host": "devcontainer-claude",
              "image_name": "${{ github.repository }}/devcontainer-claude",
              "full_platforms": "linux/amd64,linux/arm64"
            },
            {
              "target_host": "devcontainer",
              "image_name": "${{ github.repository }}/devcontainer",
              "full_platforms": "linux/amd64"
            }
          ]
          ' | jq -c)" >> "$GITHUB_OUTPUT"

  build:
    needs: define-matrix

    runs-on: ubuntu-latest
    permissions:
      contents: read

    strategy:
      matrix:
        image: ${{ fromJson(needs.define-matrix.outputs.matrix_image) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.image.image_name }}

      - name: Build Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          push: false
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ github.event_name == 'pull_request' && 'linux/amd64' || matrix.image.full_platforms }}
          outputs: type=oci,dest=/tmp/${{ matrix.image.target_host }}-image.oci
          secrets: |
            github-token=${{ secrets.GITHUB_TOKEN }}
          build-args: |
            SETUP_HOST=${{ matrix.image.target_host }}

      - name: Upload image artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ matrix.image.target_host }}-image
          path: /tmp/${{ matrix.image.target_host }}-image.oci
          retention-days: 1

  push:
    needs: ["define-matrix", "build"]
    if: github.event_name != 'pull_request'

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      matrix:
        image: ${{ fromJson(needs.define-matrix.outputs.matrix_image) }}

    steps:
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac #v3.9.1

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download image artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ matrix.image.target_host }}-image
          path: /tmp

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.image.image_name }}

      - name: Push Docker image
        id: push
        run: |
          for tag in ${{ steps.meta.outputs.tags }}; do
            skopeo copy --digestfile digest.txt \
              'oci-archive:/tmp/${{ matrix.image.target_host }}-image.oci' \
              "docker://$tag"
          done
          echo "digest=$(cat digest.txt)" >> "$GITHUB_OUTPUT"

      - name: Sign the published Docker image
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.push.outputs.digest }}
        run: |
          echo "${TAGS}" | xargs -I {} cosign sign --yes "{}@${DIGEST}"
